extends layout.pug

block pageName
  title Embedding VoteByMail.io
  meta(name="viewport", content="width=device-width, initial-scale=1.0")
  style.
    div > button {
      margin-right: 15px;
      margin-bottom: 15px;
    }

block content
  .container.mt-4
    h1 Embedding VoteByMail.io
    p This page guides you on creating embeddable versions of VoteByMail.io.  In order for these steps to be successful, you must be able to insert the iFrame into your page.  If using a Content Management System, like WordPress or Drupal, double-check that you're actually editing the raw content of the page and not using any WYSIWYG editor provided by these tools. Also, due to the safety measures adopted by modern browsers, your page must be HTTPS (not HTTP) for this to work.

    .card
      .card-body.row
        .col.col-md-6.col-sm-12.mt-3
          h4.text-primary Default State
          p Select default state (or no default)
          .input-group.mb-3
            select(
              id='prefill-state'
              class='form-control'
              aria-label='prefill state input'
              onChange=`setState(this.value)`
            )
              each state in states
                option(
                  aria-label=state
                  value=state
                )= state

          h4.text-primary Modal
          .form-check
            input(type="checkbox" onChange='toggleAsModal()' name="Embed as modal" class="form-check-input")
            label(for="Embed as modal" class="form-check-label") Embed as modal

        .col.col-md-6.col-sm-12.mt-3
          h4.text-primary Widget Code
          textarea(
            name='vbm-iframe-code'
            id='vbm-iframe-code'
            style='display: block; width: 100%; padding: 10px; color: #dc0e52; background-color: #fafafa; margin: 25px 0; border-radius: 4px; resize: none;'
            resizable='false'
            disabled='true'
          )=`${env.REACT_APP_URL}/#/org/${richOrg.id}`
          button(class='btn btn-primary' onClick='copyIframe()') Copy

    br
    h3 Preview

    //- The inside contents of this preview is used for the code when modal
    //- is true
    div(id='vbm-modal-preview')
      link(rel='stylesheet', href=`${env.REACT_APP_URL}/embed.min.css`)
      button(
        class='vote-by-mail__modal-button'
        id='vbm-modal-button'
        style='display: none;'
      )
        img(src=`${env.REACT_APP_URL}/favicon-32x32.png`, alt="VoteByMail.io")
        b Vote By Mail
      script(type='text/javascript' src=`${env.REACT_APP_URL}/embed.min.js`)
      link(rel="stylesheet", href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap")

    //- The inside contents of this preview is used for the code when modal
    //- is not true
    div(
      id='vbm-iframe-preview'
      style='width: 100%;'
    )
      link(rel='stylesheet', href=`${env.REACT_APP_URL}/embed.min.css`)
      div.vote-by-mail__wrapper
        iframe(
          id='vbm-iframe'
          src=`${env.REACT_APP_URL}/#/org/${richOrg.id}`
          style='flex: 1;'
          marginheight='0'
          frameborder='0'
        )

        .vote-by-mail__bottom-bar
          .vote-by-mail__branding
            img(src=`${env.REACT_APP_URL}/favicon-32x32.png`)
          .vote-by-mail__actions
            button(
              class='vote-by-mail__bottom-button'
              onClick='vbmUtils.toggleTranslationDropdown()'
            )
              //- Chevron
              svg(xmlns='http://www.w3.org/2000/svg' version='1.1' width='8' height='8' viewbox='0 0 448 448' style='margin-right: 2px;')
                path(class='vote-by-mail__chevron')

              //- Globe
              svg(xmlns='http://www.w3.org/2000/svg' version='1.1' width='14' height='16' viewbox='0 0 384 448')
                path(class='vote-by-mail__globe')

            button(
              style='display: none;'
              class='vote-by-mail__bottom-button modal-close'
              onClick='vbmUtils.toggleModal()'
            ) &#10006;

        //- Renders a translation-dropdown very similar to the one found
        //- on our website.
        div(class='vote-by-mail__translation-dropdown dismissed' id='vbm-translation-dropdown')
          button(
            onClick=`vbmUtils.translate('es', '${env.REACT_APP_URL}/#/org/${richOrg.id}')`
          ) Espa&ntilde;ol
          button(
            onClick=`vbmUtils.translate('zh-CN', '${env.REACT_APP_URL}/#/org/${richOrg.id}')`
          ) #{'\u7b80\u4f53\u4e2d\u6587'}
          button(
            onClick=`vbmUtils.translate('tl', '${env.REACT_APP_URL}/#/org/${richOrg.id}')`
          ) Filipino
          button(
            onClick=`vbmUtils.translate('vi', '${env.REACT_APP_URL}/#/org/${richOrg.id}')`
          ) Ti#{'\u1ebf'}ng Vi#{'\u1ec7'}t
          button(
            onClick=`vbmUtils.translate('ar', '${env.REACT_APP_URL}/#/org/${richOrg.id}')`
          ) #{'\u0627\u0644\u0639\u0631\u0628\u064a\u0629'}
          button(
            onClick=`vbmUtils.translate('fr', '${env.REACT_APP_URL}/#/org/${richOrg.id}')`
          ) Fran#{'\u00e7'}ais
          button(
            onClick=`vbmUtils.translate('ko', '${env.REACT_APP_URL}/#/org/${richOrg.id}')`
          ) #{'\ud55c\uad6d\uc5b4'}
          button(
            onClick=`vbmUtils.translate('ru', '${env.REACT_APP_URL}/#/org/${richOrg.id}')`
          ) #{'\u0440\u0443\u0441\u0441\u043a\u0438\u0439'}


        script(type='text/javascript' src=`${env.REACT_APP_URL}/embed.min.js`)
        script(
          type='text/javascript'
          src='//cdnjs.cloudflare.com/ajax/libs/iframe-resizer/3.5.3/iframeResizer.min.js'
        )
        //- More information about iFrameResize at
        //- http://davidjbradshaw.github.io/iframe-resizer/
        script iFrameResize({checkOrigin: false,scrolling: true,minHeight: 600,minWidth: 320,id:'vbm-iframe'});
        link(rel="stylesheet", href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap")


  script.
    //- We'll use the insides of the Wrappers below to update the embed code
    const modalWrapper = document.getElementById('vbm-modal-preview');
    const iframeWrapper = document.getElementById('vbm-iframe-preview');

    const modalButton = document.getElementById('vbm-modal-button');
    const iframe = document.getElementById('vbm-iframe');

    const code = document.getElementById('vbm-iframe-code');
    // The initial value of code is env.REACT_APP_URL + orgId (we can't access these here)
    const baseUrl = code.value;
    let state = '';
    let modal = false;

    // When the iframe loads it might scroll to the address form, stealing
    // window focus, we don't want that.
    let lockScroll = false;
    let lockScrollPosition = 0;

    // Basically what we do is wait for a window scroll event, if it is
    // different than lockScrollPosition we will consider that the iframe
    // has finished loading, and with a short delay we'll unlock the page.
    //
    // We do this due to the safety measures blocking us from accessing
    // iframe.onload from this page.
    window.onscroll = function() {
      if (window.scrollY !== lockScrollPosition) {
        if (lockScroll) {
          window.scroll({ top: lockScrollPosition });
        }
        // Adding a small timeout since it's a smooth animation
        setTimeout(
          function() { lockScroll = false },
          500,
        );
      }
    }

    function copyIframe() {
      // Select will only work if disabled is false
      code.disabled = false;
      code.select();
      document.execCommand('copy');
      code.disabled = true;
    }

    // Updates the code of the toggle modal button
    function updateModalCode() {
      const targetUrl = `${baseUrl}${state}`
      modalButton.onclick = function() {
        vbmUtils.toggleModal(targetUrl);
      }

      // note that innerHTML/outerHTML does not save the onclick attribute,
      // we'll need to manually add it back.
      const newCode = modalWrapper.innerHTML.replace(
        '<button',
        `<button onclick="vbmUtils.toggleModal('${targetUrl}')"`
      );

      code.value = newCode;
    }

    // scrollY must be a number, and if present it will lock scrolling the
    // screen to the given position.
    function updateCode(scrollY) {
      // This is why our widget wasn't always updating, to see the changes
      // we must first clear the iframe.src and then (after a brief delay)
      // load our url.
      iframe.src = '';
      setTimeout(
        function() {
          iframe.src = `${baseUrl}${state}`;
          code.value = iframeWrapper.innerHTML;
          // we'll lock scrolling if scrollY is provided (when users change
          // default states). If users have selected to embed a modal this
          // is not needed since the modal won't steal attention
          if (!modal) {
            lockScroll = scrollY !== undefined;
            lockScrollPosition = scrollY;
          } else {
            updateModalCode();
          }
        },
        50,
      );
    }

    function setState(s) {
      anchor = '';
      state = s !== 'No default state' ? `/address/${s}` : '';
      updateCode(window.scrollY);
    }

    function toggleAsModal() {
      modal = !modal;
      if (modal) {
        iframeWrapper.style.display = 'none';
        modalButton.style.display = 'flex';
        updateModalCode();
      } else {
        iframeWrapper.style.display = 'initial';
        modalButton.style.display = 'none';
        updateCode();
      }
    }

    // Initializes default values
    updateCode();
